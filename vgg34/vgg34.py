# -*- coding: utf-8 -*-
"""CIFAR10-VGG34.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dxX-3bK5TnkLPwivSuFbL9HMSTq4xLQ_

## Define the VGG34 Model
"""

import torch.nn as nn
import torch

class VGG(nn.Module):
  def __init__(self):
    super(VGG, self).__init__()
    self.features = self._make_layers([64, 64, 64, 64, 64, 64, 
                                      128, 128, 128, 128, 128, 128, 128, 128,
                                      256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 
                                      512, 512, 512, 512, 512, 512])
    self.classifier = nn.Linear(512, 10)

  def forward(self, x):
    x = self.features(x)
    x = x.view(x.size(0), -1)
    x = self.classifier(x)
    return x

  def _make_layers(self, cfg):
    layers = [nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=1), nn.MaxPool2d(kernel_size=2, stride=2)]
    in_channels = 64
    i = 0
    for x in cfg:
      if i != 6 and i != 14 and i != 26:
        layers += [nn.Conv2d(in_channels, x, kernel_size=3, padding=1),
                  nn.BatchNorm2d(x),
                  nn.ReLU(inplace=True)]
      else:
        layers += [nn.Conv2d(in_channels, x, kernel_size=3, stride=2, padding=1),
                  nn.BatchNorm2d(x),
                  nn.ReLU(inplace=True)]
      i += 1
      in_channels = x
    layers += [nn.AvgPool2d(kernel_size=1, stride=1)]
    return nn.Sequential(*layers)

net = VGG()

"""### Use of CUDA GPU"""

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)

"""## Load & Preprocess Data"""

import torchvision
import torchvision.transforms as transforms

# Augmentation
transform_train = transforms.Compose([
    transforms.RandomCrop(32, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

transform_test = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform_train)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform_test)
testloader = torch.utils.data.DataLoader(testset, batch_size=4,
                                         shuffle=False, num_workers=2)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

# Just to Get a Feel of CIFAR10
import matplotlib.pyplot as plt
import numpy as np

def imshow(img):
    img = img / 2 + 0.5     
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()

dataiter = iter(trainloader)
images, labels = dataiter.next()

imshow(torchvision.utils.make_grid(images))

print(' '.join('%5s' % classes[labels[j]] for j in range(4)))

"""## Define a Loss function & Optimizer"""

import torch.optim as optim

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), momentum=0.9, lr=0.01)

"""## Train the Model"""

net = net.to(device)

for epoch in range(10):  # loop over the dataset multiple times

    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):
        # get the inputs; data is a list of [inputs, labels]
        inputs, labels = data
        inputs, labels = inputs.to(device), labels.to(device)

        # zero the parameter gradients
        optimizer.zero_grad()

        # forward + backward + optimize
        outputs = net(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        # print statistics
        running_loss += loss.item()
        if i % 6250 == 6249:    # print every 6250 mini-batches
            print('[%d, %5d] loss: %.3f' %
                  (epoch + 1, i + 1, running_loss / 6250))
            running_loss = 0.0

print('Finished Training')

PATH = './cifar_vgg34.pth'
torch.save(net.state_dict(), PATH)

"""## Evaluate the Model"""

net = VGG()
net.load_state_dict(torch.load(PATH))

if torch.cuda.is_available():
    net.cuda()

dataiter = iter(testloader)
images, labels = dataiter.next()

# print images
imshow(torchvision.utils.make_grid(images))
print('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))

images = images.to(device)
outputs = net(images)
_, predicted = torch.max(outputs, 1)

print('Predicted: ', ' '.join('%5s' % classes[predicted[j]] for j in range(4)))

correct = 0
total = 0
with torch.no_grad():
    for data in testloader:
        images, labels = data
        images, labels = images.to(device), labels.to(device)
        outputs = net(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print('Accuracy of the network on the 10000 test images: %d %%' % (
    100 * correct / total))

class_correct = list(0. for i in range(10))
class_total = list(0. for i in range(10))
with torch.no_grad():
    for data in testloader:
        images, labels = data
        images, labels = images.to(device), labels.to(device)
        outputs = net(images)
        _, predicted = torch.max(outputs, 1)
        c = (predicted == labels).squeeze()
        for i in range(4):
            label = labels[i]
            class_correct[label] += c[i].item()
            class_total[label] += 1


for i in range(10):
    print('Accuracy of %5s : %2d %%' % (
        classes[i], 100 * class_correct[i] / class_total[i]))